---
layout:     post
title:      "[译]macOS平台上针对设计师/前端开发者的vim配置"
subtitle:   "iTerm + Oh My Zsh + Vim & Vim plugs workflow"
date:       2018-11-11
author:     "zhoujialei"
header-img: "img/post-bg-js-version.jpg"
tags:
    - 开发
    - 翻译计划
    - front-end
    - vim
---

# [译]macOS平台上针对设计师/前端开发者的vim配置

* 原文地址: [Vim setup for a designer/front-end dev on macOS](https://blog.envylabs.com/osx-vim-setup-for-a-designer-front-end-dev-566aa0690e84)
* 原文作者: [Drew Powers](https://blog.envylabs.com/@drew_powers?source=post_header_lockup)

## 译者按
这个星期思来想去也不知道该写些什么。这周我陷入了和electronjs的苦战，尤其当electronjs要和reactjs配套使用的时候，痛苦可能就加倍了；在这之中再加上tradingview这样的闭源库集成的时候，痛苦就真的超级加倍了；像这种细节与痛苦交织的工作过程注定很难有什么带有深度的文章分享，更多的容易变成一名踩过坑的人对于要踩坑的人的碎言碎语，时限性太强。

记得Lisp大神田春在[接受segmentfault采访](https://segmentfault.com/a/1190000002433747)的时候，回望了自己的Lisp学习生涯并说出这样的话:
> ...主要是发起自己的开源项目（cl-net-snmp），试图翻译各种Lisp资料——最主要的就是On Lisp一书。我认为这是一个领域的新手通常会做的两件事

这样说起来的话，让我现在无中生有写文章是困难的，让我现在无中生有发起自己的开源项目近乎是不可能的。于是我剩下的可能只有翻译文章这件事了。

之后我会针对前端这个领域每周坚持翻译一篇文章并尝试将翻译的文章贡献给类似于[掘金翻译计划](https://github.com/xitu/gold-miner)这样的项目，如果能被接收就再好不过了，毕竟这样算是一种另类的产出嘛。

## 正文

> 声明：其实我也不知道我在干嘛，请按需使用这篇文章

在我初次尝试深入Vim之后，我想要谈一谈它。市面上现在有成千上万的文章讲vim，但是基于下述三个理由我还是抛出了这篇文章：

* 文章的内容紧跟时代：现在很多工具和插件不仅变得过时，有时还容易被更好的东西取代。我现在在开发环境使用的工具是基于之前的旧工具改进而来的，这至少保证文章内容不是过时的。
* 我不喜欢杂乱无章的文章：其他讲vim的文章总是告诉你安装这个那个但是就是不给读者一个解释。我不会去假设说适合我的东西总是适合我的读者，但是我会尝试把事情变得简单明了。我也总是尝试尽可能地简化我的配置，尽管这个过程并不有趣
* 我是个设计师(译者：大概就是暗示读者我的审美很靠谱的意思吧):我喜欢美的东西。我的工具必须是快的，但那并不意味着它也是丑陋的。我同时需要那些能够让Sublime和Atom用户舒服的特性比如fuzzy finders, file trees等。好在Vim也具备支持这些特性的东西。

***注意: 文章假设你已经安装了homebrew***

### 1/3: Oh My Zsh

#### 这是什么
某些时候，尝试客制化macOS的Bash shell，为它加上酷玩意儿比如[powerline](https://github.com/powerline/powerline)什么的会让人感到非常头疼比如当你正在重建你的工具集去依赖python,然后需要花费无数时间调试字体问题。更别说你要深挖所有与之相关的未知的scripts和gists，在这之后如果你幸运的有所获的话你才能把掘获的代码一股脑的丢进`~/.bash_profile`里面，而且很有可能如此大费周章之后你只不过才往里面增加一个工具而已。

[Z shell](https://github.com/robbyrussell/oh-my-zsh)相对于Bash来说是一个巨大的改进，你可以透明地区设置你的系统使用它(包含Terminal，iTerm以及其他所有你用得到的东西)。再加上[Oh My Zsh](https://github.com/robbyrussell/oh-my-zsh)，你便能从一个被持续活跃地开发的具有丰富的特性的shell中受益，当然还有它附带的一个由社区驱动的插件生态系统——从中你能毫无费力的拾取一些强有力的工具。不像Bash，它生来就是为了被客制化的，你会在之后感谢自己做了这样的决定！而且幸运的是，Z shell并不是系统依赖的，所以你可以毫无负担的试用它。即使它的行为和Bash很像，你也可以在安装之后的任何时候卸载它而不影响其他任何东西。

#### 安装
在你的命令行里运行下述命令:
```
sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"
```

#### 配置

打开`~/.zshrc`文件来改变配置(类比一下相当于是你的新的`~/.bash_profile`文件)。下面是我的配置:
```
export ZSH=$HOME/.oh-my-zsh

# Theme
ZSH_THEME="agnoster"

# Plugins
plugins=(brew git node osx postgres rbenv z zsh-syntax-highlighting)
source $ZSH/oh-my-zsh.sh
```

你也可以为你的命令行设置主题，以`ZSH_THEME="themename"`这样的格式，其中themename应该包含在[packaged themes](https://github.com/robbyrussell/oh-my-zsh/wiki/Themes)。当然你也可以[配置你自己的主题](https://github.com/robbyrussell/oh-my-zsh/wiki/External-themes)。

我安装了 Homebrew, Git, Node, [OSX](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/osx), Postgres, Rbenv以及[Z plugins](https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins)。它们帮助我自动填充我打的命令。OSX插件帮助我在命令行中打开一个新的Finder窗口——这可不是在Bash中能够轻易做到的。Z插件就像它描述的那样充当一个新的Autojump的角色，借助它我能够在命令行中处于任何目录的时候只输入部分文件名字比如`z proj`然后跳转到`~/sites/my-project`。而这不过只是那些插件能够做的事情里面的极小的一部分而已。

最后一个值得注意的插件是[Zsh Syntax Highlighting plugin](https://github.com/zsh-users/zsh-syntax-highlighting)。它能够在你不小心输错某个词的时候提醒你，毫无疑问功能十分强大。

还有很多东西值得探索，但是有一件重要的事情值得注意：你的`~/.bash_profile`文件可以只是一个单一的包含数百行代码的文件，或者也可以在Oh My Zsh的帮助下，分割成数个目录下的数个文件，然后他们以一个提供同样的功能的形式被写入`~/.zshrc`，而这不过寥寥几行而已。你可以在这个[链接](https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins)下了解如何做这件事

### 2/3: iTerm

#### 这是什么

iTerm是直到我使用Vim之后才真正需要的东西。我只出于一个目的使用它: 分割panes。我能够运行我的Rails服务器，许多Gulp任务，使用TinyPNG和SVGO优化图片，编辑我的源代码等等所有的这些都只在相同的一个窗口下发生。iTerm让我摆脱了不必要的在编辑器和命令行之间的相互转换。如果你需要在编辑源码的时候使用命令行——对我来说这总是发生——你可以只使用iTerm或者在每个你打开的项目所产生的许多窗口和标签页之间无头无脑来回穿梭。总的来说这让你的工作区变得更有效更整洁，而这一切如果只使用命令行是不可能的。

此外，一些Oh My Zsh插件充分利用了一些只在iTerm存在的特性(它们在命令行内是不可能的)，你总是可以在你需要的时候充分利用这些能力。

#### 安装
去[iTerm官网](https://www.iterm2.com/)下载并安装就行了。

#### 配置
iTerm在配置上相当的简洁轻量，你可以开箱即用，当然你也可以应用一些[非常漂亮的iTerm主题](http://iterm2colorschemes.com/)

记住使用`⌘ + D`和`⌘ + Shift + D`快捷键来水平地/垂直地分割当前视图。使用`⌘ + Alt + Arrows`快捷键在分割的视图间移动，它们还挺有用的.

### 3/3: vim-plug + Vim

#### 这是什么

我猜你是基于Vim才读的这篇文章，我们的正戏终于要开场了。[vim-plug](https://github.com/junegunn/vim-plug)是一个能让你和Vim共处更愉快的Vim包管理器。借助它我们才能获得那些我们想要的类似于file trees等特性的同时避免在vimScript上花费大量时间。Pathogen也是一个Vim包管理器，但是我更倾向于vim-plug因为它的更新更简单，它的更新和维护跟Vundle这样的包管理器比较的话也更加活跃。一旦你完成vim-plug的安装你可以在`~/.vimrc`中管理vim插件。

#### vim-plug

首先你可能想要使用更新的 Vim 8.x 版本而不是旧的版本的Vim，你可以通过 Homebrew 来做这件事:
```
brew install vim
```
值得注意的是`vi`会打开旧的7.x版本的Vim，而`vim`会打开通过Homebrew安装的新的Vim.
然后在这个[repo](https://github.com/junegunn/vim-plug)的指导下安装vim-plug。
最后在`~/.vimrc`下粘贴下述内容(如果`~/.vimrc`不存在就创建一个):

```
call plug#begin('~/.vim/plugged')

" Vim Plug
call plug#begin('~/.vim/plugged')

" Airline
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" CtrlP
Plug 'ctrlpvim/ctrlp.vim', { 'on': 'CtrlP' }

" Color Schemes
Plug 'flazz/vim-colorschemes'

" NERD Commenter
Plug 'scrooloose/nerdcommenter'
" vim-ripgrep
Plug 'jremmen/vim-ripgrep'
" Surround
Plug 'tpope/vim-surround'

" Syntastic
Plug 'vim-syntastic/syntastic'

call plug#end()

" Initialize plugin system
call plug#end()
```

下述列表是部分我最喜欢的插件:

* [CtrlP](https://github.com/ctrlpvim/ctrlp.vim): fuzzy-finder
* [NERDTree](https://github.com/scrooloose/nerdtree): file tree for Vim
* [NERDCommenter](https://github.com/scrooloose/nerdcommenter): 更方便的注释帮助工具
* [surround.vim](https://github.com/tpope/vim-surround): 一些快捷键，方便处理行，单词，代码块以及HTML标签的包裹(surrounding)问题
* [Syntastic](https://github.com/vim-syntastic/syntastic): 下一代基于Babel, JSX, Ruby的语法高亮和错误检查工具，当然也支持客制化
* [Airline](https://github.com/vim-airline/vim-airline): 基于Powerline的Vim主题，方便使用者观察当前所用的Vim mode。

注意只粘贴上述的代码，插件不会安装。你需要先保存修改后的`~/.vimrc`(`:w`)，然后在Vim仍然打开的情况下运行下述命令:

```
:PlugInstall
```

还有一些有用的命令:

* `:PlugUpdate`: 更新所有插件
* `:PlugClean`: 在`~/.vimrc`中删除对应的要删除插件的代码行，然后运行这个命令即可

自然还有不计其数的其他Vim插件可以选择，VimPlug免除了我们管理这些插件的烦恼。

#### ripgrep

我们最后安装的插件是[ripgrep](https://github.com/BurntSushi/ripgrep)。这是我能找到的最快的搜索工具。它能让你的fuzzy finder变得巨快无比，它能被改装成一些特别有用的代码搜索工具(比如只用触发一个键就能瞬间看到所有某个引用的实例)。在命令行中输入下述命令安装它:

```
brew install ripgrep
```

#### CtrlP

如果你选择CtrlP来fuzzy-finding(墙裂推荐！)，我推荐将下述的设置加入到你的`~/.vimrc`中:

```
" Packages
if executable('rg')
  set grepprg=rg\ --color=never
  let g:ctrlp_user_command = 'rg %s --files --color=never --glob ""'
  let g:ctrlp_use_caching = 0
endif
let g:ctrlp_custom_ignore = {
 \ 'dir': '\.git$\|\.yardoc\|bower_components|node_modules|public$|log\|tmp$',
 \ 'file': '\.so$\|\.dat$|\.DS_Store$'
 \ }
" Key Commands
map <C-\> :NERDTreeToggle<CR>
```

上面的代码勾连起CtrlP和ripgrep，使得搜索变得变态的快。你也可以修改`ctrlp_custom_ignore`内的文件/目录列表来指明那些你不想使用CtrlP查找的文件/目录。

当使用CtrlP浏览时，简单的敲击`Enter`会在同一块分割区域打开文件。你也可以通过`Ctrl+x`或`Ctrl+v`来水平/垂直分割当前区域。

我还映射了`Ctrl + \`来使用NERDTree打开file tree，相同的命令也用来关闭file tree。

其他的`~/.vimrc`配置见我的[Github仓库](https://github.com/dangodev/config/blob/master/.vimrc)


### 新的工作流

我现在的Rails项目工作流就像下面显示的那样:

```
z proj
-> ~/sites/my-project
rails s
```

启动我的rals服务器，然后输入`⌘ + Shift + D `打开新的分割区域并在其中打开Vim:

```
vim
```

然后在这之中输入

```
Ctrl + p
```

在我的项目中寻找我想要的文件，然后敲击`Enter`来打开它。如果我想边贴边的载入另一个文件，我会通过下述命令打开文件:

```
Ctrl + p
Ctrl + v
```

然后通过

```
Ctrl + w + Arrows
```

在分割区域之间来回切换，或者使用

```
⌘ + Alt + Arrows
```

移动到命令行之下。现在我可以在不使用鼠标的情况下载我的代码之间穿梭。如果我想在当前文档下搜索，只要敲击

```
/
```

然后输入想要搜索的表达式(`n`/`N`: 当前高亮搜索结果下/上一个)。或者我需要在整个项目中搜索，我会输入

```
:Rg searchforthing
```

当我处于Vim普通模式下，然后所有关于那个表达式的实例会出现在窗口中(你也可以通过设定快捷键的形式搜索任何处于你光标下的单词)


### 结语

最后，我仍然在使用Vim然后它确实和Sublime与Atom相比有很大的不同(我仍然在尝试让自己习惯普通/插入/可视模式)。不过在上述的插件和工具的帮助下，Vim比我刚开始接触的时候友好多了。我相信只要有耐心加上开放的心态，我总能学习到新的方法能够让我更有效率的编写代码。

毕竟我做这一切的终极目标是花更少的时间写代码，以获得更多的时间交付完成的产品。